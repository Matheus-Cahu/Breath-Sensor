#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiManager.h>
#include <EEPROM.h>

extern "C" {
  #include "user_interface.h"
}

const int ledPin = D1;
const int pressureSensorPin = A0;  // Analog pin for pressure sensor
const int resetWiFiPin = D3;

// Pressure sensor configuration
const int pressureThreshold = 100;    // Adjust based on your sensor (0-1024 range)
const int pressureHysteresis = 20;    // Prevents rapid toggling
const int numReadings = 5;            // Number of readings to average
int pressureReadings[numReadings];    // Array to store readings
int readIndex = 0;                    // Current reading index
int total = 0;                        // Running total
int averagePressure = 0;              // Average pressure reading

unsigned long tempoUltimoEnvioEstado = 0;

// Variáveis de estado do sensor de pressão
bool pressaoAtiva = false;            // Estado lógico da pressão (true = ativada)
bool ultimoEstadoEnviado = false;     // Último estado enviado ao servidor
unsigned long tempoUltimaMudanca = 0;
const unsigned long tempoDebounce = 100;  // Increased for pressure sensor stability

String serverEstadoUrl;
IPAddress provisionerIp;
bool provisionerIpEncontrado = false;

// --- FUNÇÕES DE EEPROM ---

#define EEPROM_SIZE 20
#define EEPROM_ADDR_IP 0

void salvaProvisionerIp(IPAddress ip) {
  String ipStr = ip.toString();
  int len = ipStr.length();
  EEPROM.write(EEPROM_ADDR_IP, len);
  for (int i = 0; i < len; i++) {
    EEPROM.write(EEPROM_ADDR_IP + 1 + i, ipStr[i]);
  }
  EEPROM.commit();
  Serial.println("IP salvo: " + ipStr);
}

bool carregaProvisionerIp(IPAddress &ip) {
  int len = EEPROM.read(EEPROM_ADDR_IP);
  if (len <= 0 || len > 15) return false;
  char ipBuffer[16];
  for (int i = 0; i < len; i++) {
    ipBuffer[i] = EEPROM.read(EEPROM_ADDR_IP + 1 + i);
  }
  ipBuffer[len] = '\0';
  ip.fromString(String(ipBuffer));
  Serial.println("IP carregado: " + ip.toString());
  return true;
}

bool testarConexaoServidor(IPAddress ip) {
  WiFiClient client;
  HTTPClient http;
  
  String testUrl = "http://" + ip.toString() + ":5000/aviso?ativo=false";
  
  http.begin(client, testUrl);
  http.addHeader("User-Agent", "ESP8266");
  http.setTimeout(3000);
  
  int httpCode = http.GET();
  http.end();
  
  return (httpCode > 0 && httpCode < 600);
}

// Initialize pressure sensor readings
void initializePressureReadings() {
  // Fill the array with initial readings
  for (int i = 0; i < numReadings; i++) {
    pressureReadings[i] = analogRead(pressureSensorPin);
    total += pressureReadings[i];
    delay(10);
  }
  averagePressure = total / numReadings;
  Serial.println("Pressão inicial (média): " + String(averagePressure));
}

void setup() {
  Serial.begin(115200);
  Serial.println("Iniciando ESP8266 com sensor de pressão...");
  
  pinMode(ledPin, OUTPUT);
  pinMode(resetWiFiPin, INPUT_PULLUP);

  EEPROM.begin(EEPROM_SIZE);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.config(0U, 0U, 0U);
  delay(1000);

  // Verifica se botão de reset foi pressionado
  if (digitalRead(resetWiFiPin) == LOW) {
    Serial.println("Reset WiFi - reiniciando...");
    WiFi.disconnect(true);
    EEPROM.write(EEPROM_ADDR_IP, 0);
    EEPROM.commit();
    delay(1000);
    ESP.restart();
  }

  // Carrega IP salvo da EEPROM
  if (carregaProvisionerIp(provisionerIp)) {
    provisionerIpEncontrado = true;
  }

  // Configuração do WiFiManager
  WiFiManager wm;
  WiFiManagerParameter custom_server_ip("server_ip", "IP do Servidor", "", 15);
  wm.addParameter(&custom_server_ip);
  wm.setTimeout(180);
  
  Serial.println("Conectando WiFi...");
  
  bool res = wm.autoConnect("ProvisionarESP");
  
  if (!res) {
    Serial.println("Falha WiFi - reiniciando");
    ESP.restart();
  }
  
  // Verifica IP customizado
  String serverIpCustom = custom_server_ip.getValue();
  if (serverIpCustom.length() > 0) {
    IPAddress customIp;
    if (customIp.fromString(serverIpCustom)) {
      provisionerIp = customIp;
      provisionerIpEncontrado = true;
      salvaProvisionerIp(provisionerIp);
    }
  }

  Serial.println("WiFi conectado: " + WiFi.localIP().toString());

  // Descoberta automática de IP se necessário
  if (!provisionerIpEncontrado) {
    Serial.println("Procurando servidor...");
    
    IPAddress subnet = WiFi.localIP();
    uint32_t subnetInt = (uint32_t)subnet;
    subnetInt = subnetInt & 0xFFFFFF00;
    
    int ipsComuns[] = {1, 100, 101, 102, 50, 80, 200, 254};
    
    for (int i = 0; i < 8; i++) {
      IPAddress testIp = IPAddress(subnetInt | ipsComuns[i]);
      if (testIp == WiFi.localIP()) continue;
      
      if (testarConexaoServidor(testIp)) {
        provisionerIp = testIp;
        provisionerIpEncontrado = true;
        salvaProvisionerIp(provisionerIp);
        Serial.println("Servidor encontrado: " + provisionerIp.toString());
        break;
      }
    }
    
    if (!provisionerIpEncontrado) {
      provisionerIp = WiFi.gatewayIP();
      Serial.println("Usando gateway: " + provisionerIp.toString());
    }
  }

  serverEstadoUrl = "http://" + provisionerIp.toString() + ":5000/aviso";

  // Initialize pressure sensor
  initializePressureReadings();
  
  // DEBUG: Testa o sensor várias vezes para ver o estado real
  Serial.println("=== TESTE DO SENSOR DE PRESSÃO ===");
  for (int i = 0; i < 5; i++) {
    int leitura = analogRead(pressureSensorPin);
    Serial.println("Leitura " + String(i+1) + ": " + String(leitura) + " (0-1024)");
    delay(100);
  }
  
  // Estado inicial baseado na leitura atual
  pressaoAtiva = (averagePressure > pressureThreshold);
  ultimoEstadoEnviado = !pressaoAtiva;     // Força primeiro envio
  
  digitalWrite(ledPin, pressaoAtiva ? HIGH : LOW);
  
  Serial.println("Sistema pronto!");
  Serial.println("Servidor: " + provisionerIp.toString());
  Serial.println("Limiar de pressão: " + String(pressureThreshold));
  Serial.println("Histerese: " + String(pressureHysteresis));
  Serial.println("Estado inicial da pressão: " + String(pressaoAtiva ? "ATIVA" : "INATIVA"));
  Serial.println("Leitura inicial do sensor: " + String(averagePressure));
  Serial.println("=========================");
  
  tempoUltimoEnvioEstado = millis();
}

void enviarEstadoPressao(bool pressaoDetectada) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    String estadoStr = pressaoDetectada ? "true" : "false";
    String url = serverEstadoUrl + "?ativo=" + estadoStr;

    http.begin(client, url);
    http.addHeader("User-Agent", "ESP8266");
    http.setTimeout(5000);

    int httpCode = http.GET();

    if (httpCode > 0) {
      Serial.println("Enviado: " + String(pressaoDetectada ? "PRESSÃO ATIVA" : "PRESSÃO INATIVA") + " | HTTP: " + String(httpCode));
    } else {
      Serial.println("Erro no envio: " + http.errorToString(httpCode));
    }
    http.end();
  } else {
    Serial.println("WiFi desconectado");
  }
}

// Função para ler a pressão com média móvel e debounce
bool lerPressaoComDebounce() {
  static unsigned long tempoMudanca = 0;
  static bool estadoEstavel = false;
  static bool estadoAnterior = false;
  
  // Atualiza a média móvel
  total -= pressureReadings[readIndex];
  pressureReadings[readIndex] = analogRead(pressureSensorPin);
  total += pressureReadings[readIndex];
  readIndex = (readIndex + 1) % numReadings;
  averagePressure = total / numReadings;
  
  // Determina o novo estado com histerese
  bool novoEstado;
  if (pressaoAtiva) {
    // Se estava ativo, precisa cair abaixo do limiar - histerese para desativar
    novoEstado = (averagePressure > (pressureThreshold - pressureHysteresis));
  } else {
    // Se estava inativo, precisa subir acima do limiar + histerese para ativar
    novoEstado = (averagePressure > (pressureThreshold + pressureHysteresis));
  }
  
  // Se o estado mudou, reinicia o timer
  if (novoEstado != estadoAnterior) {
    tempoMudanca = millis();
    estadoEstavel = false;
  }
  
  // Se passou o tempo de debounce e não está estável ainda
  if (!estadoEstavel && (millis() - tempoMudanca) > tempoDebounce) {
    estadoEstavel = true;
    estadoAnterior = novoEstado;
    return novoEstado;
  }
  
  estadoAnterior = novoEstado;
  
  // Se ainda não estabilizou, retorna o estado atual
  return pressaoAtiva;
}

void loop() {
  // Reset WiFi se botão D3 pressionado
  if (digitalRead(resetWiFiPin) == LOW) {
    Serial.println("Reset WiFi...");
    WiFi.disconnect(true);
    EEPROM.write(EEPROM_ADDR_IP, 0);
    EEPROM.commit();
    delay(1000);
    ESP.restart();
  }

  unsigned long agora = millis();

  // Lê a pressão com debounce e média móvel
  bool novoEstado = lerPressaoComDebounce();
  
  // Se o estado mudou, reporta
  if (novoEstado != pressaoAtiva) {
    pressaoAtiva = novoEstado;
    Serial.println("MUDANÇA: Pressão " + String(pressaoAtiva ? "ATIVA" : "INATIVA"));
    Serial.println("Leitura atual do sensor: " + String(averagePressure));
  }

  // Envia estado apenas se mudou OU a cada 10 segundos
  bool deveEnviar = false;
  if (pressaoAtiva != ultimoEstadoEnviado) {
    deveEnviar = true;  // Estado mudou
  } else if ((agora - tempoUltimoEnvioEstado) >= 1000) {
    deveEnviar = true;  // Timeout de 10 segundos
  }
  
  if (deveEnviar) {
    enviarEstadoPressao(pressaoAtiva);
    ultimoEstadoEnviado = pressaoAtiva;
    tempoUltimoEnvioEstado = agora;
  }

  // Controla o LED
  digitalWrite(ledPin, pressaoAtiva ? HIGH : LOW);

  // Debug a cada 5 segundos
  static unsigned long ultimoDebug = 0;
  if ((agora - ultimoDebug) >= 1000) {
    Serial.println("Status: Pressão=" + String(pressaoAtiva ? "ATIVA" : "INATIVA") + 
                   " | Sensor=" + String(averagePressure) + 
                   " | Limiar=" + String(pressureThreshold));
    ultimoDebug = agora;
  }

  delay(10);
}
