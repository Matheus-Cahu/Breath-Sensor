#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiManager.h>  // Biblioteca de provisionamento

const int ledPin = D1;
const int botaoPin = D2;
const int resetWiFiPin = D3;

unsigned long tempoUltimoAperto = 0;
unsigned long tempoUltimaMensagem = 0;
unsigned long tempoUltimoEnvioEstado = 0;
bool fluxoDetectado = false;
bool alertaAtivo = false;

bool estadoAnteriorBotao = false;
bool estadoAtualBotao = false;
unsigned long tempoUltimaMudanca = 0;
const unsigned long tempoDebounce = 50;

String serverUrl;
String serverEstadoUrl;

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  pinMode(botaoPin, INPUT_PULLUP);
  pinMode(resetWiFiPin, INPUT_PULLUP);

  // Verifica se botão de reset Wi-Fi foi pressionado
  if (digitalRead(resetWiFiPin) == LOW) {
    Serial.println("Reset WiFi pressionado, limpando configurações...");
    WiFiManager wm;
    wm.resetSettings();         // Remove SSID/senha
    WiFi.disconnect(true);      // Desconecta e apaga tudo
    WiFi.config(0U, 0U, 0U);    // Limpa IP estático (usa DHCP)
    delay(1000);
    ESP.restart();
  }

  WiFiManager wm;
  bool wifiOk = wm.autoConnect("ProvisionarESP");

  if (!wifiOk) {
    Serial.println("Falha ao conectar, reiniciando...");
    delay(3000);
    ESP.restart();
  }

  Serial.println("WiFi conectado! IP: " + WiFi.localIP().toString());

  String meuIP = WiFi.localIP().toString();
  serverUrl = "http://" + meuIP + ":5000/aviso";
  serverEstadoUrl = "http://" + meuIP + ":5000/estado";

  Serial.println("serverUrl: " + serverUrl);
  Serial.println("serverEstadoUrl: " + serverEstadoUrl);

  digitalWrite(ledPin, LOW);
  tempoUltimoAperto = millis();
  tempoUltimaMensagem = millis();
  tempoUltimoEnvioEstado = millis();
}

void enviarAviso(const char* mensagem) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    String url = serverUrl + "?mensagem=" + urlencode(mensagem);
    Serial.println("Enviando para URL: " + url);

    http.begin(client, url);
    http.addHeader("User-Agent", "ESP8266");
    http.setTimeout(5000);

    int httpCode = http.GET();

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.printf("Aviso enviado: %s | Código HTTP: %d\n", mensagem, httpCode);
      Serial.println("Resposta: " + payload);
    } else {
      Serial.printf("Falha ao enviar aviso: %s | Erro: %s\n", mensagem, http.errorToString(httpCode).c_str());
    }
    http.end();
  } else {
    Serial.println("Wi-Fi desconectado, não foi possível enviar aviso.");
  }
}

void enviarEstadoBotao(bool estado) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    String estadoStr = estado ? "true" : "false";
    String url = serverEstadoUrl + "?ativo=" + estadoStr;
    Serial.println("Enviando estado do botão para URL: " + url);

    http.begin(client, url);
    http.addHeader("User-Agent", "ESP8266");
    http.setTimeout(5000);

    int httpCode = http.GET();

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.printf("Estado enviado: %s | Código HTTP: %d\n", estadoStr.c_str(), httpCode);
    } else {
      Serial.printf("Falha ao enviar estado: %s | Erro: %s\n", estadoStr.c_str(), http.errorToString(httpCode).c_str());
    }
    http.end();
  } else {
    Serial.println("Wi-Fi desconectado, não foi possível enviar estado.");
  }
}

String urlencode(const char* str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;

  for (int i = 0; str[i] != 0; i++) {
    c = str[i];
    if (isalnum(c)) {
      encodedString += c;
    } else {
      encodedString += '%';
      code0 = (c >> 4) & 0xF;
      code1 = c & 0xF;
      encodedString += char(code0 > 9 ? code0 - 10 + 'A' : code0 + '0');
      encodedString += char(code1 > 9 ? code1 - 10 + 'A' : code1 + '0');
    }
  }
  return encodedString;
}

void loop() {
  if (digitalRead(resetWiFiPin) == LOW) {
    Serial.println("Reset WiFi pressionado durante execução. Limpando e reiniciando...");
    WiFi.disconnect(true);
    WiFi.config(0U, 0U, 0U);  // Força uso de DHCP
    delay(1000);
    ESP.restart();
  }

  unsigned long agora = millis();

  bool leituraBotao = (digitalRead(botaoPin) == HIGH);
  if (leituraBotao != estadoAnteriorBotao) {
    tempoUltimaMudanca = agora;
  }
  if ((agora - tempoUltimaMudanca) > tempoDebounce) {
    if (leituraBotao != estadoAtualBotao) {
      estadoAtualBotao = leituraBotao;
      if (estadoAtualBotao) {
        Serial.println("*** BOTÃO PRESSIONADO DETECTADO ***");
        tempoUltimoAperto = agora;
        alertaAtivo = false;
        if (!fluxoDetectado) {
          enviarAviso("Fluxo respiratorio detectado");
          fluxoDetectado = true;
        }
      }
    }
  }
  estadoAnteriorBotao = leituraBotao;
  bool botaoPressionado = estadoAtualBotao;

  if ((agora - tempoUltimoEnvioEstado) >= 3000) {
    enviarEstadoBotao(botaoPressionado);
    tempoUltimoEnvioEstado = agora;
  }

  if (botaoPressionado) {
    digitalWrite(ledPin, HIGH);
  } else if (agora - tempoUltimoAperto > 10000) {
    digitalWrite(ledPin, HIGH);
    if (!alertaAtivo) {
      enviarAviso("Sem fluxo respiratorio - ALERTA INICIADO");
      alertaAtivo = true;
      tempoUltimaMensagem = agora;
    } else if (agora - tempoUltimaMensagem >= 1000) {
      enviarAviso("Sem fluxo respiratorio - ALERTA CONTINUO");
      tempoUltimaMensagem = agora;
    }
    fluxoDetectado = false;
  } else {
    digitalWrite(ledPin, LOW);
    fluxoDetectado = false;
    alertaAtivo = false;
  }

  delay(10);
}
